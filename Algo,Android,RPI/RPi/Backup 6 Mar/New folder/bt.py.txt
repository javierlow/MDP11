import subprocess
from bluetooth import *

class BluetoothConnector(object):

        def __init__(self):

                subprocess.Popen(['sh','/home/pi/run/reset.sh'])
                self.server_socket = None
                self.client_socket = None
                self.bluetooth_is_connectted = False

        def close_bt_socket(self):

                if self.client_socket:
                        self.client_socket.close()
                        print ("Closing client socket")
                if self.server_socket:
                        self.server_socket.close()
                        print ("Closing server socket")
                self.bluetooth_is_connectted = False

        def bluetooth_is_connected(self):
                return self.bluetooth_is_connectted

        def connect_to_bluetooth(self):

                # Creating the server socket and bind to port
                btport = 4
                try:
                        self.server_socket = BluetoothSocket( RFCOMM )
                        self.server_socket.bind(("", btport))
                        self.server_socket.listen(1)   
                        self.port = self.server_socket.getsockname()[1]
                        uuid = "00001101-0000-1000-8000-00805F9B34FB"

                        advertise_service( self.server_socket, "SampleServer",
                                           service_id = uuid,
                                           service_classes = [ uuid, SERIAL_PORT_CLASS ],
                                           profiles = [ SERIAL_PORT_PROFILE ],
                                                                )
                        print ("Waiting for BT connection on RFCOMM channel %d" % self.port)
                        # Accept requests
                        self.client_socket, client_address = self.server_socket.accept()
                        print ("Accepted connection from ", client_address)
                        self.bluetooth_is_connectted = True

                except Exception as e:
                        print ("\nError: %s" %str(e))

        def send_message_bluetooth(self, message):

                try:
                        self.client_socket.send(str(message))

                except BluetoothError:
                        print ("\nBluetooth Write Error. Connection lost")
                        self.close_bt_socket()
                        self.connect_to_bluetooth()       

        def receive_message_bluetooth(self):

                try:
                        msg = self.client_socket.recv(2048)
                        #print ("Received [%s] " % msg)
                        return msg

                except BluetoothError:
                        print ("\nBluetooth Read Error. Connection lost")
                        self.close_bt_socket()
                        self.connect_to_bluetooth()      



#Test between Bluetooth and RPI

# if __name__ == "__main__":
#         print ("Running Main")
#         bt = BluetoothConnector()
#         bt.connect_to_bluetooth()

#         while True:
#                 send_msg = input()
#                 print ("Write(): %s " % send_msg)
#                 bt.send_message_bluetooth(send_msg)
#                 print ("read")
#                 print ("data received: %s " % bt.receive_message_bluetooth())

#         print ("closing sockets")
#         bt.close_bt_socket()
